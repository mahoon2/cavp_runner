# Variables
CC = gcc
TARGET = cavp_testing
OBJDIR = ./objfiles
INCLUDES = -I./include
WOLFSSL_CFLAGS = -DHAVE_CONFIG_H -DBUILDING_WOLFSSL -DWOLFSSL_HAVE_ATOMIC_H -DBUILDING_WOLFSSL -DHAVE_C___ATOMIC=1 -DHAVE_THREAD_LS -DNDEBUG -DNO_DO178 -DWOLFSSL_X86_64_BUILD -DERROR_QUEUE_PER_THREAD -DTFM_TIMING_RESISTANT -DECC_TIMING_RESISTANT -DWC_RSA_BLINDING -DWOLFSSL_USE_ALIGN -DWOLFSSL_SHA224 -DWOLFSSL_SHA512 -DWOLFSSL_SHA384 -DNO_DSA -DHAVE_ECC -DTFM_ECC256 -DECC_SHAMIR -DNO_OLD_TLS -DWOLFSSL_NO_TLS12 -DNO_OLD_TLS -DWOLFSSL_ASN_TEMPLATE -DWOLFSSL_ASN_PRINT -DWOLFSSL_BASE64_ENCODE -DWOLFSSL_SHA3 -DWOLFSSL_NO_SHAKE128 -DWOLFSSL_NO_SHAKE256 -DHAVE_POLY1305 -DHAVE_CHACHA -DHAVE_HASHDRBG -DHAVE_TLS_EXTENSIONS -DHAVE_SNI -DHAVE_TLS_EXTENSIONS -DHAVE_SUPPORTED_CURVES -DHAVE_FFDHE_2048 -DNO_RC4 -DHAVE_ENCRYPT_THEN_MAC -DNO_PSK -DNO_MD4 -DWOLFCRYPT_ONLY -DWOLFSSL_SP_MATH_ALL -DWOLFSSL_SP_X86_64 -DWC_NO_ASYNC_THREADING -DHAVE_DH_DEFAULT_PARAMS -DWOLFSSL_SYS_CA_CERTS -DNO_DES3 -DNO_DES3_TLS_SUITES -DGCM_TABLE_4BIT -DHAVE_AESGCM -DHAVE___UINT128_T=1 -DWOLFSSL_TEST_STATIC_BUILD -DHAVE_WC_INTROSPECTION -DWOLFSSL_AEAD_ONLY
CFLAGS = -Wall -g -MD $(WOLFSSL_CFLAGS) $(INCLUDES)

LIBS =
OPENSSL_LIBS = libs/libssl.a libs/libcrypto.a
WOLFSSL_LIBS = libs/libwolfssl.a
LIBS += $(OPENSSL_LIBS)
LIBS += $(WOLFSSL_LIBS)

# Source files
SRCS = $(wildcard *.c)
SRCS := $(filter-out $(DEVICE_SRCS), $(SRCS))

# Headers (assuming corresponding .h files exist for all .c files)
HEADERS = $(SRCS:.c=.h)

# Object files
OBJS = $(patsubst %.c, $(OBJDIR)/%.o, $(SRCS))

# Dependency files
DEPS = $(OBJS:.o=.d)

all: $(TARGET)

# Create objfiles directory if it does not exist
$(OBJDIR):
	mkdir -p $(OBJDIR)

# Rule to link object files and create the final binary
$(TARGET): $(OBJDIR) $(OBJS)
	$(CC) $(CFLAGS) -o $(TARGET) $(OBJS) $(LIBS)

# Rule to compile source files into object files
$(OBJDIR)/%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -f $(TARGET) $(OBJDIR)/*.o $(OBJDIR)/*.d

-include $(DEPS)

.PHONY: all clean
